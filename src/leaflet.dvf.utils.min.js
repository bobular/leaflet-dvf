if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (c, d) {
        for (var b = (d || 0), a = this.length; b < a; b++) {
            if (this[b] === c) {
                return b
            }
        }
        return -1
    }
}
if (!Object.keys) {
    Object.keys = (function () {
        var c = Object.prototype.hasOwnProperty, d = !({toString: null}).propertyIsEnumerable("toString"), b = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"], a = b.length;
        return function (g) {
            var e, h, f;
            if ((typeof g !== "object" && typeof g !== "function") || g === null) {
                throw new TypeError("Object.keys called on non-object")
            }
            e = [];
            for (h in g) {
                if (c.call(g, h)) {
                    e.push(h)
                }
            }
            if (d) {
                for (f = 0; f < a; f++) {
                    if (c.call(g, b[f])) {
                        e.push(b[f])
                    }
                }
            }
            return e
        }
    })()
}
L.Util.guid = function () {
    var a = function () {
        return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1)
    };
    return a() + a() + "-" + a() + "-" + a() + "-" + a() + "-" + a() + a() + a()
};
L.Util.getProperty = function (c, b, a) {
    return (b in c) ? c[b] : a
};
L.Util.setFieldValue = function (a, g, d) {
    var f = g.split(".");
    var e = a;
    var b;
    for (var c = 0; c < f.length - 1; ++c) {
        b = f[c];
        e[b] = e[b] || {};
        e = e[b]
    }
    e[f[f.length - 1]] = d
};
L.Util.getFieldValue = function (h, n) {
    var l = null;
    if (n) {
        var g = n.split(".");
        var o = h;
        var e;
        var i;
        var f;
        var a;
        var b;
        var d;
        var c = -1;
        var j;
        for (var m = 0; m < g.length; ++m) {
            e = g[m];
            c = e.indexOf("[");
            if (c > -1) {
                d = e.substring(c);
                e = e.substring(0, c);
                d = d.replace("[", "").replace("]", "");
                i = d.split("=");
                f = i[0];
                a = i[1];
                o = o[e];
                for (var k = 0; k < o.length; ++k) {
                    b = o[k];
                    j = b[f];
                    if (j && j === a) {
                        o = b
                    }
                }
            } else {
                if (o && o.hasOwnProperty(e)) {
                    o = o[e]
                } else {
                    o = null;
                    break
                }
            }
        }
        l = o
    } else {
        l = h
    }
    return l
};
L.Util.getNumericRange = function (c, g) {
    var e = Number.MAX_VALUE;
    var a = Number.MIN_VALUE;
    for (var d in c) {
        if (c.hasOwnProperty(d)) {
            var b = c[d];
            var f = L.Util.getFieldValue(b, g);
            e = Math.min(e, f);
            a = Math.max(a, f)
        }
    }
    return [e, a]
};
L.Util.pointToGeoJSON = function () {
    var b = {
        type: "Feature",
        geometry: {type: "Point", coordinates: [this._latlng[1], this._latlng[0]]},
        properties: {}
    };
    for (var a in this.options) {
        if (this.options.hasOwnProperty(a)) {
            var c = this.options[a];
            if (typeof(c) !== "function") {
                b.properties[a] = c
            }
        }
    }
    return b
};
L.Util.updateLayer = function (a, b) {
    if (a.eachLayer && !a instanceof L.FeatureGroup) {
        a.eachLayer(function (c) {
            L.Util.updateLayer(c, b)
        })
    } else {
        b.call(this, a)
    }
};
L.CategoryLegend = L.Class.extend({
    initialize: function (a) {
        L.Util.setOptions(this, a)
    }, generate: function (i) {
        i = i || {};
        var a = document.createElement("div");
        var f = L.DomUtil.create("div", "legend", a);
        var d = i.className;
        var h = this.options;
        if (d) {
            L.DomUtil.addClass(f, d)
        }
        if (i.title) {
            L.DomUtil.create("div", "legend-title", f).innerHTML = i.title
        }
        for (var g in h) {
            categoryOptions = h[g];
            var e = categoryOptions.displayName || g;
            var b = L.DomUtil.create("div", "data-layer-legend", f);
            var c = L.DomUtil.create("div", "legend-box", b);
            L.DomUtil.create("div", "key", b).innerHTML = e;
            L.StyleConverter.applySVGStyle(c, categoryOptions)
        }
        return a.innerHTML
    }
});
L.LegendIcon = L.DivIcon.extend({
    initialize: function (c, g, l) {
        var f = document.createDocumentFragment();
        var a = document.createElement("div", "", f);
        var d = L.DomUtil.create("div", "legend", a);
        var e = L.DomUtil.create("div", "title", d);
        var b = L.DomUtil.create("div", "legend-box", d);
        var j = L.DomUtil.create("div", "legend-values", d);
        var i;
        var h = g.title || g.name;
        if (h) {
            e.innerHTML = h
        }
        for (var k in c) {
            i = c[k];
            L.DomUtil.create("div", "key", j).innerHTML = i.name || k;
            L.DomUtil.create("div", "value", j).innerHTML = i.value
        }
        L.StyleConverter.applySVGStyle(b, g);
        b.style.height = "5px";
        l.html = a.innerHTML;
        l.className = l.className || "legend-icon";
        L.DivIcon.prototype.initialize.call(this, l)
    }
});
L.legendIcon = function (a, c, b) {
    return new L.LegendIcon(a, c, b)
};
L.GeometryUtils = {
    getName: function (d) {
        var b = null;
        if (d && d.features) {
            for (var a = 0; a < d.features.length; ++a) {
                var c = d.features[a];
                if (c.properties && c.properties.name) {
                    b = c.properties.name;
                    break
                }
            }
        }
        return b
    }, getGeoJSONLocation: function (g, b, e, f) {
        var c = new L.GeoJSON(g, {
            pointToLayer: function (i, j) {
                var h = {
                    location: j,
                    text: e ? L.Util.getFieldValue(b, e) : [j.lat.toFixed(3), j.lng.toFixed(3)].join(", "),
                    center: j
                };
                return f(h, b)
            }
        });
        var a = null;
        try {
            a = L.GeometryUtils.loadCentroid(g)
        } catch (d) {
            console.log("Error loading centroid for " + JSON.stringify(g))
        }
        return {location: c, text: e ? L.Util.getFieldValue(b, e) : null, center: a}
    }, mergeProperties: function (f, c, h) {
        var d = c.features;
        var a = L.GeometryUtils.indexFeatureCollection(d, h);
        var j;
        var e;
        var g = {type: "FeatureCollection", features: []};
        for (var i in f) {
            if (f.hasOwnProperty(i)) {
                j = f[i];
                e = j[h];
                if (e) {
                    var k = a[e];
                    for (var b in j) {
                        k.properties[b] = j[b]
                    }
                    g.features.push(k)
                }
            }
        }
        return g
    }, indexFeatureCollection: function (b, e) {
        var c = b.features;
        var i;
        var g;
        var a = {};
        var h;
        for (var f = 0; f < c.length; ++f) {
            i = c[f];
            g = i.properties;
            h = g[e];
            if (h in a) {
                var d = a[h];
                if (d.geometry.type !== "GeometryCollection") {
                    a[h] = {
                        type: "Feature",
                        geometry: {type: "GeometryCollection", geometries: [i.geometry, d.geometry]}
                    }
                } else {
                    d.geometry.geometries.push(i.geometry)
                }
            } else {
                a[h] = i
            }
        }
        return a
    }, arrayToMap: function (h, e, a) {
        var d = {};
        var c;
        var g;
        var f;
        for (var b = 0; b < h.length; ++b) {
            c = h[b];
            g = c[e];
            f = a ? c[a] : c;
            d[g] = f
        }
        return d
    }, arrayToMaps: function (h, d) {
        var b;
        var n;
        var k;
        var l;
        var j = [];
        var e;
        var a;
        var m;
        for (var f = 0; f < d.length; ++f) {
            j.push({})
        }
        for (var g = 0; g < h.length; ++g) {
            n = h[g];
            for (var c = 0; c < d.length; ++c) {
                b = j[c];
                e = d[c];
                a = e.from;
                m = e.to;
                k = n[a];
                l = m ? n[m] : n;
                b[k] = l
            }
        }
        return j
    }, loadCentroid: function (k) {
        var h = null;
        var c;
        var g, f;
        if (k.geometry && k.geometry.type === "Point") {
            h = new L.LatLng(k.geometry.coordinates[1], k.geometry.coordinates[0])
        } else {
            if (typeof jsts !== "undefined") {
                var b = new jsts.io.GeoJSONParser();
                var e = b.read(k);
                if (e.getCentroid) {
                    c = e.getCentroid();
                    g = c.coordinate.x;
                    f = c.coordinate.y
                } else {
                    if (e.features) {
                        var a = 0;
                        var j = 0;
                        for (var d = 0; d < e.features.length; ++d) {
                            c = e.features[d].geometry.getCentroid();
                            a += c.coordinate.x;
                            j += c.coordinate.y
                        }
                        g = a / e.features.length;
                        f = j / e.features.length
                    } else {
                        c = e.geometry.getCentroid();
                        g = c.coordinate.x;
                        f = c.coordinate.y
                    }
                }
                h = new L.LatLng(f, g)
            }
        }
        return h
    }, loadCentroids: function (d) {
        var c = {};
        var b;
        for (var a in d) {
            b = d[a];
            c[a] = L.GeometryUtils.loadCentroid(b)
        }
        return c
    }
};
L.SVGPathBuilder = L.Class.extend({
    initialize: function (c, a, b) {
        this._points = c || [];
        this._innerPoints = a || [];
        L.Util.setOptions(this, b)
    }, options: {closePath: true}, _getPathString: function (e, f) {
        var c = "";
        if (e.length > 0) {
            var a = e[0];
            f = f !== null ? f : 2;
            var b = "M";
            var g = "L";
            var h = "Z";
            if (L.Browser.vml) {
                f = 0;
                b = "m";
                g = "l";
                h = "xe"
            }
            c = b + a.x.toFixed(f) + "," + a.y.toFixed(f);
            for (var d = 1; d < e.length; d++) {
                a = e[d];
                c += g + a.x.toFixed(f) + "," + a.y.toFixed(f)
            }
            if (this.options.closePath) {
                c += h
            }
        }
        return c
    }, addPoint: function (a, b) {
        if (b) {
            this._innerPoints.push(a)
        } else {
            this._points.push(a)
        }
    }, build: function (b) {
        b = b || this.options.digits;
        var a = this._getPathString(this._points, b);
        if (this._innerPoints) {
            a += this._getPathString(this._innerPoints, b)
        }
        return a
    }
});
L.StyleConverter = {
    keyMap: {
        fillColor: {
            property: ["background-color"], valueFunction: function (a) {
                return a
            }
        },
        color: {
            property: ["color", "border-top-color", "border-right-color", "border-bottom-color", "border-left-color"],
            valueFunction: function (a) {
                return a
            }
        },
        weight: {
            property: ["border-width"], valueFunction: function (a) {
                return Math.ceil(a) + "px"
            }
        },
        stroke: {
            property: ["border-style"], valueFunction: function (a) {
                return a === true ? "solid" : "none"
            }
        },
        dashArray: {
            property: ["border-style"], valueFunction: function (b) {
                var a = "solid";
                if (b) {
                    a = "dashed"
                }
                return a
            }
        },
        barThickness: {
            property: ["height"], valueFunction: function (a) {
                return a + "px"
            }
        },
        radius: {
            property: ["height"], valueFunction: function (a) {
                return 2 * a + "px"
            }
        },
        fillOpacity: {
            property: ["opacity"], valueFunction: function (a) {
                return a
            }
        }
    }, applySVGStyle: function (c, a, b) {
        var e = L.StyleConverter.keyMap;
        if (b) {
            e = L.Util.extend(e, b)
        }
        c.style.borderStyle = "solid";
        for (var d in a) {
            L.StyleConverter.setCSSProperty(c, d, a[d], e)
        }
        return c
    }, setCSSProperty: function (e, i, h, f) {
        f = f || L.StyleConverter.keyMap;
        var g = f[i];
        var c = "";
        if (g) {
            var d = g.property;
            for (var a = 0, b = d.length; a < b; ++a) {
                c += d[a] + ":" + g.valueFunction(h) + ";"
            }
        }
        e.style.cssText += c;
        return e
    }
};
L.StylesBuilder = L.Class.extend({
    initialize: function (a, b) {
        this._categories = a;
        this._styleFunctionMap = b;
        this._buildStyles()
    }, _buildStyles: function () {
        var f = {};
        var d;
        var b;
        var a;
        for (var c = 0; c < this._categories.length; ++c) {
            d = this._categories[c];
            f[d] = {};
            for (var e in this._styleFunctionMap) {
                b = this._styleFunctionMap[e];
                a = b.evaluate ? b.evaluate(c) : (typeof b === "function" ? b(c) : b);
                f[d][e] = a
            }
        }
        this._styleMap = f
    }, getStyles: function () {
        return this._styleMap
    }
});
L.PaletteBuilder = L.Class.extend({
    initialize: function (a) {
        this._styleFunctionMap = a
    }, generate: function (k) {
        k = k || {};
        var b = document.createElement("div");
        var g = L.DomUtil.create("div", "palette", b);
        var f = k.count || 10;
        var e = (function (n) {
            var l = [];
            for (var m = 0; m < n; ++m) {
                l.push(m)
            }
            return l
        })(f);
        var h = new L.StylesBuilder(e, this._styleFunctionMap);
        var j = h.getStyles();
        if (k.className) {
            L.DomUtil.addClass(g, k.className)
        }
        for (var d in j) {
            var c = L.DomUtil.create("i", "palette-element", g);
            var a = j[d];
            L.StyleConverter.applySVGStyle(c, a)
        }
        return b.innerHTML
    }
});
L.HTMLUtils = {
    buildTable: function (h, d, r) {
        d = d || "table table-condensed table-striped table-bordered";
        var a = document.createDocumentFragment();
        var u = L.DomUtil.create("table", d, a);
        var t = L.DomUtil.create("thead", "", u);
        var c = L.DomUtil.create("tbody", "", u);
        var g = L.DomUtil.create("tr", "", t);
        var p = ["Name", "Value"];
        for (var q = 0, o = p.length; q < o; q++) {
            var k = L.DomUtil.create("th", "", g);
            k.innerHTML = p[q]
        }
        r = r || [];
        function s(w, y) {
            for (var x = 0, v = w.length; x < v; x++) {
                if (w[x] === y) {
                    return true
                }
            }
            return false
        }

        for (var e in h) {
            if (h.hasOwnProperty(e) && !s(r, e)) {
                var m = h[e];
                if (typeof m === "object") {
                    var j = document.createElement("div");
                    j.appendChild(L.HTMLUtils.buildTable(m, r));
                    m = j.innerHTML
                }
                var b = L.DomUtil.create("tr", "", c);
                var n = [e, m];
                for (q = 0, o = n.length; q < o; q++) {
                    var f = L.DomUtil.create("td", "", b);
                    f.innerHTML = n[q]
                }
            }
        }
        return u
    }
};
L.AnimationUtils = {
    animate: function (h, l, m, o) {
        var g = o.delay || 0;
        var k = o.frames || 30;
        var e = o.duration || 500;
        var i = {};
        var d = o.easeFunction || function (p) {
                return p
            };
        var a = o.complete;
        var c = e / k;
        for (var n in l) {
            if (n != "color" && n != "fillColor" && m[n]) {
                i[n] = new L.LinearFunction([0, l[n]], [k - 1, m[n]])
            } else {
                if (n == "color" || n == "fillColor") {
                    i[n] = new L.RGBColorBlendFunction(0, k - 1, l[n], m[n])
                }
            }
        }
        var j = {};
        var b = 0;
        var f = function () {
            for (var p in i) {
                j[p] = i[p].evaluate(b)
            }
            h.options = L.extend({}, h.options, j);
            h.setStyle(h.options).redraw();
            b++;
            c = d(c);
            if (b < k) {
                setTimeout(f, c)
            } else {
                a()
            }
        };
        setTimeout(f, g)
    }
};
L.Color = L.Class.extend({
    initialize: function (a) {
        this._rgb = [0, 0, 0];
        this._hsl = [0, 1, 0.5];
        this._a = 1;
        if (a) {
            this.parseColorDef(a)
        }
    }, parseColorDef: function (a) {
    }, rgbToHSL: function (a, i, k) {
        a /= 255;
        i /= 255;
        k /= 255;
        var m = Math.max(a, i, k), e = Math.min(a, i, k);
        var f, n, c = (m + e) / 2;
        if (m == e) {
            f = n = 0
        } else {
            var j = m - e;
            n = c > 0.5 ? j / (2 - m - e) : j / (m + e);
            switch (m) {
                case a:
                    f = (i - k) / j + (i < k ? 6 : 0);
                    break;
                case i:
                    f = (k - a) / j + 2;
                    break;
                case k:
                    f = (a - i) / j + 4;
                    break
            }
            f /= 6
        }
        return [f, n, c]
    }, hslToRGB: function (i, m, f) {
        var a, j, k;
        var e = function (h, g, b) {
            if (b < 0) {
                b += 1
            }
            if (b > 1) {
                b -= 1
            }
            if (b < 1 / 6) {
                return h + (g - h) * 6 * b
            }
            if (b < 1 / 2) {
                return g
            }
            if (b < 2 / 3) {
                return h + (g - h) * (2 / 3 - b) * 6
            }
            return h
        };
        if (m === 0) {
            a = j = k = f
        } else {
            var c = f < 0.5 ? f * (1 + m) : f + m - f * m;
            var d = 2 * f - c;
            a = e(d, c, i + 1 / 3);
            j = e(d, c, i);
            k = e(d, c, i - 1 / 3)
        }
        return [Math.floor(a * 255), Math.floor(j * 255), Math.floor(k * 255)]
    }, setRGB: function (d, c, a) {
        this._rgb = [d, c, a];
        this._hsl = this.rgbToHSL(d, c, a);
        return this
    }, setHSL: function (c, b, a) {
        this._hsl = [c, b, a];
        this._rgb = this.hslToRGB(c, b, a);
        return this
    }, toHSL: function () {
        return this._hsl
    }, toHSLString: function () {
        var a = "hsl";
        if (this._a < 1) {
            a += "a"
        }
        return a + "(" + (this._hsl[0] * 360).toFixed(1) + "," + (this._hsl[1] * 100).toFixed(0) + "%," + (this._hsl[2] * 100).toFixed(0) + "%)"
    }, toRGB: function () {
        return this._rgb
    }, toRGBString: function () {
        var c;
        if (this._a < 1) {
            c = "rgba(" + this._rgb[0].toFixed(0) + "," + this._rgb[1].toFixed(0) + "," + this._rgb[2].toFixed(0) + "," + this._a.toFixed(1) + ")"
        } else {
            var b = [this._rgb[0].toString(16), this._rgb[1].toString(16), this._rgb[2].toString(16)];
            for (var a = 0; a < b.length; ++a) {
                if (b[a].length === 1) {
                    b[a] = "0" + b[a]
                }
            }
            c = "#" + b.join("")
        }
        return c
    }, r: function (a) {
        if (!arguments.length) {
            return this._rgb[0]
        }
        return this.setRGB(a, this._rgb[1], this._rgb[2])
    }, g: function (a) {
        if (!arguments.length) {
            return this._rgb[1]
        }
        return this.setRGB(this._rgb[0], a, this._rgb[2])
    }, b: function (a) {
        if (!arguments.length) {
            return this._rgb[2]
        }
        return this.setRGB(this._rgb[0], this._rgb[1], a)
    }, h: function (a) {
        if (!arguments.length) {
            return this._hsl[0]
        }
        return this.setHSL(a, this._hsl[1], this._hsl[2])
    }, s: function (a) {
        if (!arguments.length) {
            return this._hsl[1]
        }
        return this.setHSL(this._hsl[0], a, this._hsl[2])
    }, l: function (a) {
        if (!arguments.length) {
            return this._hsl[2]
        }
        return this.setHSL(this._hsl[0], this._hsl[1], a)
    }, a: function (a) {
        if (!arguments.length) {
            return this._a
        }
        this._a = a;
        return this
    }
});
L.RGBColor = L.Color.extend({
    initialize: function (a) {
        L.Color.prototype.initialize.call(this, a)
    }, parseColorDef: function (h) {
        var f = h instanceof Array;
        var e = h.indexOf("#") === 0;
        var k = [];
        var j, i, c, d;
        if (f) {
            j = Math.floor(h[0]);
            i = Math.floor(h[1]);
            c = Math.floor(h[2]);
            d = h.length === 4 ? h[3] : 1
        } else {
            if (e) {
                h = h.replace("#", "");
                j = parseInt(h.substring(0, 2), 16);
                i = parseInt(h.substring(2, 4), 16);
                c = parseInt(h.substring(4, 6), 16);
                d = h.length === 8 ? parseInt(h.substring(6, 8), 16) : 1
            } else {
                k = h.replace("rgb", "").replace("a", "").replace(/\s+/g, "").replace("(", "").replace(")", "").split(",");
                j = parseInt(k[0]);
                i = parseInt(k[1]);
                c = parseInt(k[2]);
                d = k.length === 4 ? parseInt(k[3]) : 1
            }
        }
        this.setRGB(j, i, c);
        this._a = d
    }
});
L.rgbColor = function (a) {
    return new L.RGBColor(a)
};
L.HSLColor = L.Color.extend({
    initialize: function (a) {
        L.Color.prototype.initialize.call(this, a)
    }, parseColorDef: function (e) {
        var d = e instanceof Array;
        var g, f, c, b;
        if (d) {
            g = e[0];
            f = e[1];
            c = e[2];
            b = e.length === 4 ? e[3] : 1
        } else {
            var i = e.replace("hsl", "").replace("a", "").replace("(", "").replace(/\s+/g, "").replace(/%/g, "").replace(")", "").split(",");
            g = Number(i[0]) / 360;
            f = Number(i[1]) / 100;
            c = Number(i[2]) / 100;
            b = i.length === 4 ? parseInt(i[3]) : 1
        }
        this.setHSL(g, f, c);
        this._a = b
    }
});
L.hslColor = function (a) {
    return new L.HSLColor(a)
};
L.Animation = L.Class.extend({
    initialize: function (b, a) {
        this._easeFunction = b;
        this._animateFrame = a
    }, run: function (b, a) {
        this.stop();
        this._el = b;
        this._inProgress = true;
        this._duration = a.duration || 0.25;
        this._animationOptions = a;
        this._startTime = +new Date();
        this.fire("start");
        this._animate()
    }, stop: function () {
        if (!this._inProgress) {
            return
        }
        this._step();
        this._complete()
    }, _animate: function () {
        this._animId = L.Util.requestAnimFrame(this._animate, this);
        this._step()
    }, _step: function () {
        var a = (+new Date()) - this._startTime, b = this._duration * 1000;
        if (a < b) {
            this._runFrame(this._easeFunction(a / b))
        } else {
            this._runFrame(1);
            this._complete()
        }
    }, _runFrame: function (a) {
        this._animateFrame(a);
        this.fire("step")
    }, _complete: function () {
        L.Util.cancelAnimFrame(this._animId);
        this._inProgress = false;
        this.fire("end")
    }
});