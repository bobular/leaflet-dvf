L.LocationModes = {
    LATLNG: function (b, c) {
        var d = function (g, i) {
            var l = L.Util.getFieldValue(b, g);
            var j = L.Util.getFieldValue(b, i);
            var h = null;
            if (l && j) {
                var k = new L.LatLng(l, j);
                h = {location: k, text: [k.lat.toFixed(3), k.lng.toFixed(3)].join(", "), center: k}
            }
            return h
        };
        var a = d(this.options.latitudeField, this.options.longitudeField);
        if (!a && this.options.fallbackLocationFields) {
            var f = 0;
            var e;
            while (!a && f < this.options.fallbackLocationFields.length) {
                e = this.options.fallbackLocationFields[f];
                a = d(e.latitudeField, e.longitudeField);
                f++
            }
        }
        return a
    }, GEOHASH: function (a, b) {
        var d = this.options.geohashField ? L.Util.getFieldValue(a, this.options.geohashField) : b;
        var e = decodeGeoHash(d);
        var c;
        if (e.latitude[2] && e.longitude[2]) {
            c = new L.LatLngBounds(new L.LatLng(e.latitude[0], e.longitude[0]), new L.LatLng(e.latitude[1], e.longitude[1]))
        }
        return {location: c, text: d, center: c.getCenter()}
    }, GWCOUNTRY: function (f, h) {
        var b = this.options.codeField ? L.Util.getFieldValue(f, this.options.codeField) : h;
        var j;
        var c;
        var e = L.gwNoLookup || {};
        var k = L.countries || {};
        var d = L.countryCentroids || {};
        var i = b.toUpperCase();
        b = i;
        var a = i in e;
        if (a) {
            b = e[i] || b
        }
        if (b) {
            j = k[b];
            c = d[b]
        } else {
            console.log("Code not found: " + i)
        }
        var g = new L.GeoJSON(j);
        return {location: g, text: L.GeometryUtils.getName(j) || b, center: c}
    }, COUNTRY: function (d, f) {
        var a = this.options.codeField ? L.Util.getFieldValue(d, this.options.codeField) : f;
        var l;
        var b;
        var j = L.codeLookup || {};
        var i = L.alpha2Lookup || {};
        var h = L.fips2Lookup || {};
        var k = L.countries || {};
        var c = L.countryCentroids || {};
        var g = a.toUpperCase();
        a = g;
        if (a.length === 2) {
            a = i[g] || h[g]
        } else {
            if (a.length === 3) {
                a = j[g] || a
            }
        }
        if (a) {
            l = k[a];
            b = c[a]
        } else {
            console.log("Code not found: " + g)
        }
        var e = new L.GeoJSON(l);
        return {location: e, text: L.GeometryUtils.getName(l) || a, center: b}
    }, STATE: function (c, e) {
        var a = this.options.codeField ? L.Util.getFieldValue(c, this.options.codeField) : e;
        var h;
        var b;
        var i = L.states || {};
        var f = L.stateCentroids || {};
        var g = a.toUpperCase();
        a = g;
        h = i[a];
        b = f[a];
        var d = new L.GeoJSON(h);
        return {location: d, text: L.GeometryUtils.getName(h) || a, center: b}
    }, GEOJSON: function (c, d) {
        var a = this.options.geoJSONField;
        var g = a ? L.Util.getFieldValue(c, a) : c;
        var b = null;
        if (g) {
            var e = this;
            var f = function (i, h) {
                return e.recordToLayer(i, h)
            };
            b = L.GeometryUtils.getGeoJSONLocation(g, c, this.options.locationTextField, f)
        }
        return b
    }, LOOKUP: function (b, c) {
        var e = this.options.codeField ? L.Util.getFieldValue(b, this.options.codeField) : c;
        this._lookupIndex = this._lookupIndex || L.GeometryUtils.indexFeatureCollection(this.options.locationLookup, this.options.locationIndexField || this.options.codeField);
        var g = this._lookupIndex[e];
        var a = null;
        if (!g && e.indexOf("0") === 0) {
            g = this._lookupIndex[e.substring(1)]
        }
        if (g) {
            var d = this;
            var f = function (i, h) {
                return d.recordToLayer(i, h)
            };
            a = L.GeometryUtils.getGeoJSONLocation(g, b, this.options.locationTextField, f)
        }
        return a
    }, CUSTOM: function (c, e) {
        var a = this.options.codeField;
        var g = L.Util.getFieldValue(c, a);
        var f = {};
        var b;
        f[g] = c;
        if (this.options.getLocation) {
            var d = this;
            var h = function (j, i) {
                d.locationToLayer(i, f[j])
            };
            b = this.options.getLocation(f, a, [g], h)
        }
        return b
    }
};
L.DataLayer = L.LayerGroup.extend({
    includes: L.Mixin.Events,
    options: {
        recordsField: "features",
        locationMode: L.LocationModes.LATLNG,
        latitudeField: "geometry.coordinates.1",
        longitudeField: "geometry.coordinates.0",
        displayField: null,
        displayOptions: null,
        layerOptions: {numberOfSides: 4, radius: 10, weight: 1, color: "#000"},
        showLegendTooltips: true,
        tooltipOptions: {iconSize: new L.Point(60, 50), iconAnchor: new L.Point(-5, 50), mouseOverExaggeration: 2},
        setHighlight: function (a) {
            a.weight = a.weight || 1;
            a.fillOpacity = a.fillOpacity || 0.5;
            a.weight *= 2;
            a.fillOpacity /= 1.5;
            return a
        },
        unsetHighlight: function (a) {
            a.weight = a.weight || 1;
            a.fillOpacity = a.fillOpacity || 0.25;
            a.weight /= 2;
            a.fillOpacity *= 1.5;
            return a
        }
    },
    initialize: function (b, a) {
        L.Util.setOptions(this, a);
        L.LayerGroup.prototype.initialize.call(this, a);
        b = b || {};
        this._includeFunction = this.options.filter || this.options.includeLayer;
        this._markerFunction = this.options.getMarker || this._getMarker;
        this._addChildLayers();
        this.addData(b)
    },
    _addChildLayers: function () {
        this._boundaryLayer = new L.LayerGroup();
        this.addLayer(this._boundaryLayer);
        this._trackLayer = new L.LayerGroup();
        this.addLayer(this._trackLayer)
    },
    _zoomFunction: function (f) {
        var d = this._map;
        var a = this;
        var c = d.getZoom();
        if (this.options.maxZoom && c > this.options.maxZoom) {
            this.hiddenLayers = [];
            this.eachLayer(function (e) {
                a.hiddenLayers.push(e);
                d.removeLayer(e)
            })
        } else {
            if (this.hiddenLayers) {
                while (this.hiddenLayers.length > 0) {
                    var b = this.hiddenLayers.pop();
                    d.addLayer(b);
                    if (this.options.backgroundLayer && b.bringToBack) {
                        b.bringToBack()
                    }
                }
                this.hiddenLayers = null
            }
        }
    },
    onAdd: function (a) {
        L.LayerGroup.prototype.onAdd.call(this, a);
        a.on("zoomend", this._zoomFunction, this)
    },
    onRemove: function (a) {
        L.LayerGroup.prototype.onRemove.call(this, a);
        a.off("zoomend", this._zoomFunction, this)
    },
    bringToBack: function () {
        this.invoke("bringToBack");
        if (this._trackLayer) {
            this._trackLayer.invoke("bringToBack")
        }
        if (this._boundaryLayer) {
            this._boundaryLayer.invoke("bringToBack")
        }
    },
    bringToFront: function () {
        if (this._boundaryLayer) {
            this._boundaryLayer.invoke("bringToFront")
        }
        if (this._trackLayer) {
            this._trackLayer.invoke("bringToFront")
        }
        this.invoke("bringToFront")
    },
    getBounds: function () {
        var a;
        this.eachLayer(function (b) {
            if (b.getBounds) {
                if (!a) {
                    a = b.getBounds()
                } else {
                    a.extend(b.getBounds())
                }
            }
        });
        return a
    },
    _getLocation: function (a, b) {
        return this.options.locationMode.call(this, a, b)
    },
    _processLocation: function (a) {
        var b = a.center;
        return b
    },
    _styleBoundary: function (c, b, a) {
        if (c.setStyle) {
            var d;
            if (this.options.boundaryStyle instanceof Function) {
                d = this.options.boundaryStyle.call(this, a, c)
            }
            d = d || this.options.boundaryStyle || L.extend({}, b, {fillOpacity: 0.2, clickable: false});
            c.setStyle(d)
        }
        return c
    },
    _addBoundary: function (b, c, a) {
        var d = b.location;
        var e;
        if (this.options.includeBoundary) {
            if (d instanceof L.LatLngBounds) {
                d = new L.Rectangle(d)
            }
            d = this._styleBoundary(d, c, a);
            this._boundaryLayer.addLayer(d);
            e = d
        }
        return e
    },
    _getLayer: function (b, d, a) {
        var e = this._addBoundary(b, d, a);
        b = this._processLocation(b);
        var c;
        if (b) {
            c = this._markerFunction.call(this, b, d, a);
            c.boundaryLayer = e
        }
        return c
    },
    _getMarker: function (c, d, b) {
        var a;
        if (c) {
            if (d.numberOfSides >= 30 && !(d.innerRadius || (d.innerRadiusX && d.innerRadiusY))) {
                a = new L.CircleMarker(c, d)
            } else {
                a = new L.RegularPolygonMarker(c, d)
            }
        }
        return a
    },
    _preProcessRecords: function (a) {
        return a
    },
    _shouldLoadRecord: function (a) {
        return this._includeFunction ? this._includeFunction.call(this, a) : true
    },
    _loadRecords: function (d) {
        var b;
        d = this._preProcessRecords(d);
        for (var c in d) {
            if (d.hasOwnProperty(c)) {
                var a = d[c];
                a = this.options.deriveProperties ? this.options.deriveProperties(a) : a;
                var e = this._shouldLoadRecord(a);
                if (e) {
                    b = this._getLocation(a, c);
                    this.locationToLayer(b, a)
                }
            }
        }
    },
    _preloadLocations: function (c) {
        var i = this.options.codeField;
        var a = [];
        var f = {};
        for (var d in c) {
            if (c.hasOwnProperty(d)) {
                var e = c[d];
                var b = L.Util.getFieldValue(e, i);
                f[b] = e;
                a.push(b)
            }
        }
        if (this.options.getLocation) {
            var h = this;
            var g = function (k, j) {
                h.locationToLayer(j, f[k])
            };
            this.options.getLocation(f, i, a, g)
        }
    },
    setDisplayOptions: function (a) {
        this.options.displayOptions = a;
        this.reloadData();
        return this
    },
    setDisplayOption: function (c, b) {
        this.options.displayOptions = this.options.displayOptions || {};
        if (c in this.options.displayOptions) {
            var a = this.options.displayOptions[c];
            this.options.displayOptions[c] = L.extend({}, a, b)
        } else {
            this.options.displayOptions[c] = b
        }
        this.reloadData();
        return this
    },
    setFilter: function (a) {
        this.options.filter = a;
        this.reloadData();
        return this
    },
    setData: function (a) {
        this._data = a;
        this.reloadData()
    },
    reloadData: function () {
        if (!this._layerIndex) {
            this.clearLayers();
            this._addChildLayers()
        }
        if (this._data) {
            this.addData(this._data)
        }
        this.fire("legendChanged", this);
        return this
    },
    addData: function (b) {
        var a = this.options.recordsField !== null && this.options.recordsField.length > 0 ? L.Util.getFieldValue(b, this.options.recordsField) : b;
        if (this.options.getIndexKey && !this._layerIndex) {
            this._layerIndex = {};
            this._boundaryIndex = {}
        }
        if (this.options.locationMode === L.LocationModes.CUSTOM && this.options.preload) {
            this._preloadLocations(a)
        } else {
            this._loadRecords(a)
        }
        this._data = b
    },
    locationToLayer: function (b, a) {
        var c;
        c = this.recordToLayer(b, a);
        if (c) {
            this.addLayer(c)
        }
    },
    _bindMouseEvents: function (g, h, l) {
        var k = this;
        var m = this.options;
        var f = m.setHighlight;
        var e = m.unsetHighlight;
        var c = m.tooltipOptions;
        var b = function (r) {
            var q = r.target;
            var o = this.options || q.options;
            var n = new L.LegendIcon(l, o, {
                className: c.className || "leaflet-div-icon",
                iconSize: c.iconSize,
                iconAnchor: c.iconAnchor
            });
            var s = r.latlng || r.target._latlng;
            var p = new L.Marker(s, {icon: n});
            k.addLayer(p);
            if (k.tooltip) {
                k.removeLayer(k.tooltip);
                k.tooltip = null
            }
            k.tooltip = p;
            if (f) {
                o = f(o)
            }
            if (q.setStyle) {
                q.setStyle(o)
            }
            q.isHighlighted = true
        };
        var a = function (n) {
            if (k.tooltip) {
                k.tooltip.setLatLng(n.latlng)
            }
        };
        var i = function (p) {
            if (!p.target.isHighlighted) {
                return
            }
            p.target.isHighlighted = false;
            if (k.tooltip) {
                k.removeLayer(k.tooltip);
                k.tooltip = null
            }
            var o = p.target;
            var n = this.options || o.options;
            if (e) {
                n = e(n)
            }
            if (o.setStyle) {
                o.setStyle(n)
            }
        };
        var j = function (n) {
            n.off("mouseover");
            n.off("mouseout");
            n.off("mousemove");
            n.on({mouseover: b, mouseout: i, mousemove: a})
        };
        var d = function (n) {
            if (n.eachLayer) {
                n.eachLayer(function (o) {
                    d(o)
                })
            } else {
                j(n)
            }
        };
        d(g)
    },
    _getDynamicOptions: function (d) {
        var g = L.Util.extend({}, this.options.layerOptions);
        var c = this.options.displayOptions;
        var j = {};
        if (c) {
            for (var i in c) {
                var a = c[i];
                var b = L.Util.getFieldValue(d, i);
                var h;
                var f = a.displayText ? a.displayText(b) : b;
                j[i] = {name: a.displayName, value: f};
                if (a.styles) {
                    g = L.Util.extend(g, a.styles[b]);
                    a.styles[b] = g
                } else {
                    for (var e in a) {
                        h = a[e];
                        g[e] = h.evaluate ? h.evaluate(b) : (h.call ? h.call(this, b) : h)
                    }
                }
            }
        }
        return {layerOptions: g, legendDetails: j}
    },
    _getIndexedLayer: function (d, b, f, a) {
        if (this.options.getIndexKey) {
            var c = this.options.getIndexKey.call(this, b, a);
            if (c in d) {
                layer = d[c];
                var g = function (h) {
                    if (f.radius && h instanceof L.CircleMarker) {
                        h.setRadius(f.radius)
                    }
                    h.setStyle(f);
                    if (h.setLatLng && h.getLatLng() !== b.center) {
                        h.setLatLng(b.center)
                    } else {
                        h.redraw()
                    }
                };
                L.Util.updateLayer(layer, g);
                if (layer.boundaryLayer) {
                    layer.boundaryLayer = this._styleBoundary(layer.boundaryLayer, f, a)
                }
            } else {
                layer = this._getLayer(b, f, a);
                d[c] = layer
            }
            if (this.options.getTrack) {
                var e = !layer.trackLayer;
                layer.trackLayer = this.options.getTrack.call(this, layer, b, layer.trackLayer);
                if (e) {
                    this._trackLayer.addLayer(layer.trackLayer)
                }
            }
        } else {
            layer = this._getLayer(b, f, a)
        }
        return layer
    },
    recordToLayer: function (b, a) {
        var g = L.Util.extend({}, this.options.layerOptions);
        var d;
        var c = {};
        var h = true;
        var f = this;
        if (this._includeFunction) {
            h = this._includeFunction.call(this, a)
        }
        if (h) {
            var e = this._getDynamicOptions(a);
            g = e.layerOptions;
            c = e.legendDetails;
            if (b && g) {
                g.title = b.text;
                d = this._getIndexedLayer(this._layerIndex, b, g, a);
                if (d) {
                    if (this.options.showLegendTooltips) {
                        this._bindMouseEvents(d, g, c)
                    }
                    if (this.options.onEachRecord) {
                        this.options.onEachRecord.call(this, d, a, b, this)
                    }
                }
            }
        }
        return d
    },
    getLegend: function (a) {
        return this.options.getLegend ? this.options.getLegend.call(this, a) : this._getLegend(a)
    },
    _getLegendElement: function (z) {
        var r;
        var v;
        var t = document.createElement("i");
        var k = z.displayProperties;
        var c = z.layerOptions;
        var e = z.ignoreProperties;
        var a = z.displayTextFunction;
        var g = z.index;
        var n = z.numSegments;
        var q = z.segmentWidth;
        var m = z.minValue;
        var w = z.maxValue;
        L.StyleConverter.applySVGStyle(t, c);
        var j = {
            evaluate: function (i) {
                return z.breaks[i]
            }
        };
        for (var f in k) {
            if (k.hasOwnProperty(f) && e.indexOf(f) === -1) {
                valueFunction = k[f];
                if (valueFunction && (valueFunction.getBounds || (k.minValue && k.maxValue))) {
                    var h = valueFunction.getBounds ? valueFunction.getBounds() : null;
                    var A = h ? h[0].x : k.minValue;
                    var y = h ? h[1].x : k.maxValue;
                    var b = z.breaks ? j : new L.LinearFunction(new L.Point(0, A), new L.Point(n, y));
                    r = A;
                    v = y;
                    if (a) {
                        r = a(A);
                        v = a(y)
                    }
                    if (g === 0) {
                        m.innerHTML = r;
                        w.innerHTML = v
                    }
                    var d = (y - A) / n;
                    var l = b.evaluate(g);
                    var B = b.evaluate(g + 1);
                    var o = valueFunction.evaluate ? valueFunction.evaluate(l) : valueFunction(l);
                    var u = valueFunction.evaluate ? valueFunction.evaluate(B) : valueFunction(B);
                    L.StyleConverter.setCSSProperty(t, f, o);
                    if (f === "fillColor") {
                        if (z.gradient) {
                            t.style.cssText += "background-image:linear-gradient(left , " + o + " 0%, " + u + " 100%);background-image:-ms-linear-gradient(left , " + o + " 0%, " + u + " 100%);background-image:-moz-linear-gradient(left , " + o + " 0%, " + u + " 100%);background-image:-webkit-linear-gradient(left , " + o + " 0%, " + u + " 100%);"
                        } else {
                            t.style.cssText += "background-color:" + o + ";"
                        }
                    }
                    if (f === "color") {
                        t.style.cssText += "border-top-color:" + o + ";border-bottom-color:" + u + ";border-left-color:" + o + ";border-right-color:" + u + ";"
                    }
                    if (f === "weight") {
                        t.style.cssText += "border-top-width:" + o + ";border-bottom-width:" + u + ";border-left-width:" + o + ";border-right-width:" + u + ";"
                    }
                    var p = z.minX || (d * g) + A;
                    var s = z.maxX || p + d;
                    if (a && valueFunction) {
                        p = a(p);
                        s = a(s)
                    }
                    t.setAttribute("title", p + " - " + s)
                }
            }
        }
        t.style.width = q + "px";
        return t
    },
    _getLegend: function (l) {
        l = l || this.options.legendOptions || {};
        var f = l.className;
        var u = document.createElement("div");
        var h = L.DomUtil.create("div", "legend", u);
        var x = l.numSegments || 10;
        var w = l.width || 100;
        var b = this.options.layerOptions || {};
        var s = b.weight || 0;
        var z = (w / x) - 2 * s;
        var C;
        var t = this.options.displayOptions || {};
        if (f) {
            L.DomUtil.addClass(h, f)
        }
        if (l.title) {
            L.DomUtil.create("legend", "", h).innerHTML = l.title
        }
        var p = function (i) {
            return i
        };
        for (var c in t) {
            if (t.hasOwnProperty(c)) {
                var n = t[c];
                if (!n.excludeFromLegend) {
                    var k = n.displayName || c;
                    C = n.displayText;
                    var a = C ? C : p;
                    var o = n.styles;
                    L.DomUtil.create("div", "legend-title", h).innerHTML = k;
                    if (o) {
                        h.innerHTML += new L.CategoryLegend(o).generate()
                    } else {
                        var r = L.DomUtil.create("div", "data-layer-legend");
                        var v = L.DomUtil.create("div", "min-value", r);
                        var E = L.DomUtil.create("div", "scale-bars", r);
                        var D = L.DomUtil.create("div", "max-value", r);
                        var j = ["displayName", "displayText", "minValue", "maxValue"];
                        var F = n.breaks;
                        var e = [];
                        x = l.numSegments || 10;
                        if (F) {
                            var A = new L.LinearFunction([F[0], 0], [F[F.length - 1], w]);
                            var g = 0;
                            var y = 0;
                            for (var B = 1; B < F.length; ++B) {
                                y = A.evaluate(F[B]);
                                e.push(y - g - 2 * s);
                                g = y
                            }
                            x = e.length
                        }
                        for (var m = 0; m < x; ++m) {
                            var q = {
                                displayProperties: n,
                                layerOptions: b,
                                ignoreProperties: j,
                                displayTextFunction: a,
                                index: m,
                                numSegments: x,
                                segmentWidth: z,
                                minValue: v,
                                maxValue: D,
                                gradient: l.gradient
                            };
                            if (F && e.length > 0) {
                                q.segmentWidth = e[m];
                                q.segmentSize = e[m];
                                q.minX = F[m];
                                q.maxX = F[m + 1];
                                q.breaks = F
                            }
                            var d = this._getLegendElement(q);
                            E.appendChild(d)
                        }
                        h.appendChild(r)
                    }
                }
            }
        }
        return u.innerHTML
    }
});
L.dataLayer = function (b, a) {
    return new L.DataLayer(b, a)
};
L.MapMarkerDataLayer = L.DataLayer.extend({
    _getMarker: function (c, b, a) {
        return new L.MapMarker(c, b)
    }
});
L.mapMarkerDataLayer = function (b, a) {
    return new L.MapMarkerDataLayer(b, a)
};
L.MarkerDataLayer = L.DataLayer.extend({
    initialize: function (b, a) {
        this._markerMap = {};
        L.DataLayer.prototype.initialize.call(this, b, a)
    },
    options: {
        recordsField: "features",
        locationMode: L.LocationModes.LATLNG,
        latitudeField: "latitude",
        longitudeField: "longitude",
        layerOptions: {icon: null},
        showLegendTooltips: false
    },
    _getMarker: function (c, b, a) {
        if (this.options.setIcon) {
            b.icon = this.options.setIcon.call(this, a, b)
        }
        return new L.Marker(c, b)
    },
    _getLegendElement: function (a) {
    },
    _getLegend: function (a) {
        return "<span>No legend available</span>"
    }
});
L.markerDataLayer = function (b, a) {
    return new L.MarkerDataLayer(b, a)
};
L.PanoramioLayer = L.MarkerDataLayer.extend({
    statics: {
        UPLOAD_DATE_FORMAT: "DD MMM YYYY",
        SIZE_BY_DATE: "date",
        SIZE_BY_POPULARITY: "popularity",
        SIZE_BY_NONE: "none",
        SIZES: {square: [60, 60], mini_square: [32, 32]},
        NUM_PHOTOS: 50
    }
});
L.PanoramioLayer = L.PanoramioLayer.extend({
    initialize: function (a) {
        L.MarkerDataLayer.prototype.initialize.call(this, {}, a);
        this._from = 0;
        this._to = L.PanoramioLayer.NUM_PHOTOS;
        this._calls = []
    },
    options: {
        recordsField: "photos",
        latitudeField: "latitude",
        longitudeField: "longitude",
        locationMode: L.LocationModes.LATLNG,
        showLegendTooltips: false,
        sizeBy: L.PanoramioLayer.SIZE_BY_DATE,
        layerOptions: {opacity: 1},
        onEachRecord: function (c, b) {
            var h = b.photo_file_url;
            var g = b.photo_title;
            var e = this;
            var d = b.width;
            var a = b.height;
            var f = 20000;
            c.on("click", function (p) {
                var j = document.createElement("div");
                var n = L.DomUtil.create("div", "", j);
                L.DomUtil.addClass(n, "panoramio-content");
                var l = L.DomUtil.create("img", "photo", n);
                l.setAttribute("onload", "this.style.opacity=1;");
                l.setAttribute("src", h);
                l.style.width = d + "px";
                var o = L.DomUtil.create("div", "photo-info", n);
                o.style.width = (d - 20) + "px";
                o.innerHTML = "<span>" + g + '</span><a class="photo-link" target="_blank" href="' + b.photo_url + '"><img src="http://www.panoramio.com/img/glass/components/logo_bar/panoramio.png" style="height: 14px;"/></a>';
                var k = L.DomUtil.create("a", "author-link", n);
                k.setAttribute("target", "_blank");
                k.setAttribute("href", b.owner_url);
                k.innerHTML = "by " + b.owner_name;
                var m = new L.DivIcon({className: "photo-details", html: j.innerHTML, iconAnchor: [d / 2, a / 2]});
                var i = new L.Marker(p.target._latlng, {icon: m, zIndexOffset: f});
                i.on("click", function (q) {
                    e.removeLayer(q.target)
                });
                c.viewedImage = i;
                e.viewedImage = i;
                e.addLayer(i)
            });
            if (this.options.onEachPhoto) {
                this.options.onEachPhoto.call(this, c, b)
            }
        },
        setIcon: function (b, d) {
            var g = L.Util.getFieldValue(b, "photo_title");
            var e = null;
            if (this._sizeFunction) {
                e = this._sizeFunction.evaluate(b.index)
            }
            var a = e ? new L.Point(e, e) : L.PanoramioLayer.SIZES[this.options.size];
            var c = b.photo_file_url.replace("/medium/", "/" + this.options.size + "/");
            var f = new L.DivIcon({
                iconSize: a,
                className: "",
                html: '<img class="photo" onload="this.style.opacity=1" title="' + g + '" src="' + c + '"/>'
            });
            return f
        },
        updateInterval: 300000,
        size: "square",
        attributionText: 'Photos provided by <a href="http://www.panoramio.com"><img src="http://www.panoramio.com/img/glass/components/logo_bar/panoramio.png" style="height: 10px;"/></a>.  Photos provided by <a href="http://www.panoramio.com"><img src="http://www.panoramio.com/img/glass/components/logo_bar/panoramio.png" style="height: 10px;"/></a> are under the copyright of their owners',
        refreshEvents: "moveend",
        photoSet: "public"
    },
    includes: L.Mixin.Events,
    onAdd: function (b) {
        L.DataLayer.prototype.onAdd.call(this, b);
        if (b.attributionControl) {
            b.attributionControl.addAttribution(this.options.attributionText)
        }
        var a = this;
        var c = function (f) {
            a._from = 0;
            a._to = L.PanoramioLayer.NUM_PHOTOS;
            a.fire("requestingPhotos");
            if (a._call) {
                clearTimeout(a._call)
            }
            var d = function () {
                a.requestPhotos()
            };
            a._call = setTimeout(d, 1000)
        };
        this.requestPhotos();
        this._interval = setInterval(c, this.options.updateInterval);
        this._resetFunction = c;
        b.on(this.options.refreshEvents, c)
    },
    onRemove: function (a) {
        L.DataLayer.prototype.onRemove.call(this, a);
        if (a.attributionControl) {
            a.attributionControl.removeAttribution(this.options.attributionText)
        }
        if (this._interval) {
            clearInterval(this._interval);
            this._interval = null
        }
        a.off(this.options.refreshEvents, this._resetFunction)
    },
    calculateSizeByDate: function (f) {
        var g = f.photos;
        var a = [];
        for (var d = 0; d < g.length; ++d) {
            var b = g[d];
            var e = moment(b.upload_date, L.PanoramioLayer.UPLOAD_DATE_FORMAT);
            a.push(e);
            g[d].index = e
        }
        a.sort(function (i, h) {
            return i - h
        });
        var c = L.PanoramioLayer.SIZES[this.options.size][0];
        this._sizeFunction = new L.LinearFunction([a[0], c / 2], [a[a.length - 1], c]);
        return f
    },
    calculateSizeByPopularity: function (c) {
        var d = c.photos;
        for (var b = 0; b < d.length; ++b) {
            d[b].index = b
        }
        var a = L.PanoramioLayer.SIZES[this.options.size][0];
        this._sizeFunction = new L.LinearFunction([0, a / 2], [d.length, a]);
        return c
    },
    next: function () {
        this._from = this._to;
        this._to = this._from + L.PanoramioLayer.NUM_PHOTOS;
        this.requestPhotos()
    },
    previous: function () {
        this._to = this._from;
        this._from = this._from - L.PanoramioLayer.NUM_PHOTOS;
        this.requestPhotos()
    },
    requestJsonp: function (b, e, g) {
        var a = this, c = "function" + new Date().getTime(), f = [];
        e.callback = "window.LeafletDvfJsonpCallbacks." + c;
        for (var d in e) {
            if (e.hasOwnProperty(d)) {
                f.push(d + "=" + encodeURIComponent(e[d]))
            }
        }
        b += (b.indexOf("?") > 0 ? "&" : "?") + f.join("&");
        if (typeof window.LeafletDvfJsonpCallbacks === "undefined") {
            window.LeafletDvfJsonpCallbacks = {}
        }
        window.LeafletDvfJsonpCallbacks[c] = function (h) {
            g.call(a, h);
            delete window.LeafletDvfJsonpCallbacks[c]
        };
        if (this.jsonpScript) {
            document.head.removeChild(this.jsonpScript);
            this.jsonpScript = null
        }
        this.jsonpScript = document.createElement("script");
        this.jsonpScript.setAttribute("type", "text/javascript");
        this.jsonpScript.setAttribute("async", "true");
        this.jsonpScript.setAttribute("src", b);
        document.head.appendChild(this.jsonpScript);
        return {
            abort: function () {
                if (c in window.LeafletDvfJsonpCallbacks) {
                    window.LeafletDvfJsonpCallbacks[c] = function () {
                        delete window.LeafletDvfJsonpCallbacks[c]
                    }
                }
            }
        }
    },
    requestPhotos: function () {
        var e = this;
        var d = this._map.getBounds();
        var b = d.getSouthWest();
        var a = d.getNorthEast();
        while (e._calls.length > 0) {
            e._calls.pop().abort()
        }
        var c = this.requestJsonp("http://www.panoramio.com/map/get_panoramas.php", {
            set: this.options.photoSet,
            from: e._from,
            to: e._to,
            minx: b.lng,
            miny: b.lat,
            maxx: a.lng,
            maxy: a.lat,
            size: "medium",
            mapfilter: "true"
        }, function (f) {
            e._count = f.count;
            if (moment && e.options.sizeBy === L.PanoramioLayer.SIZE_BY_DATE) {
                f = e.calculateSizeByDate(f)
            } else {
                if (e.options.sizeBy === L.PanoramioLayer.SIZE_BY_POPULARITY) {
                    f = e.calculateSizeByPopularity(f)
                }
            }
            e.fire("photosAvailable", f);
            e.clearLayers();
            e.addData(f)
        });
        e._calls.push(c)
    }
});
L.panoramioLayer = function (a) {
    return new L.PanoramioLayer(a)
};
L.GeohashDataLayer = L.DataLayer.extend({
    initialize: function (b, a) {
        L.DataLayer.prototype.initialize.call(this, b, a)
    },
    options: {
        recordsField: "features",
        locationMode: L.LocationModes.GEOHASH,
        geohashField: "geohash",
        displayField: null,
        displayOptions: null,
        layerOptions: {weight: 1, color: "#000"},
        getIndexKey: function (b, a) {
            return b.text
        }
    },
    _getLayer: function (c, b, a) {
        return new L.Rectangle(c.location, b)
    }
});
L.geohashDataLayer = function (b, a) {
    return new L.GeohashDataLayer(b, a)
};
L.ChoroplethDataLayer = L.DataLayer.extend({
    initialize: function (b, a) {
        L.DataLayer.prototype.initialize.call(this, b, a)
    },
    options: {
        recordsField: "features",
        locationMode: L.LocationModes.COUNTRY,
        codeField: "ISO",
        displayField: null,
        displayOptions: null,
        layerOptions: {weight: 1, color: "#000"},
        maxZoom: 16,
        backgroundLayer: true
    },
    _getLayer: function (b, c, a) {
        if (b.location instanceof L.LatLng) {
            b.location = this._markerFunction.call(this, b.location, c, a)
        } else {
            if (b.location instanceof L.LatLngBounds) {
                b.location = new L.Rectangle(b.location, c)
            }
        }
        if (b.location.setStyle) {
            c.gradient = b.location instanceof L.Polyline ? false : c.gradient;
            b.location.setStyle(c)
        }
        return b.location
    }
});
L.choroplethDataLayer = function (b, a) {
    return new L.ChoroplethDataLayer(b, a)
};
L.ChartDataLayer = L.DataLayer.extend({
    options: {showLegendTooltips: false}, initialize: function (b, a) {
        L.DataLayer.prototype.initialize.call(this, b, a)
    }, _getLayer: function (a, g, f) {
        var c = this._addBoundary(a, g, f);
        a = this._processLocation(a);
        var d = this.options.chartOptions;
        var b = this.options.tooltipOptions;
        var i = {};
        i = g;
        i.data = {};
        i.chartOptions = d;
        for (var h in this.options.chartOptions) {
            i.data[h] = this.options.getFieldValue ? this.options.getFieldValue.call(this, f, h) : L.Util.getFieldValue(f, h)
        }
        for (h in b) {
            i[h] = b[h]
        }
        var e;
        if (a) {
            e = this._getMarker(a, i);
            e.boundaryLayer = c
        }
        return e
    }, _getMarker: function (b, a) {
    }, _getLegend: function (b) {
        var a = L.DataLayer.prototype._getLegend.call(this, b);
        var c = new L.CategoryLegend(this.options.chartOptions);
        b = b || this.options.legendOptions;
        return c.generate(b)
    }
});
L.BarChartDataLayer = L.ChartDataLayer.extend({
    initialize: function (b, a) {
        L.ChartDataLayer.prototype.initialize.call(this, b, a)
    }, _getMarker: function (b, a) {
        return new L.BarChartMarker(b, a)
    }
});
L.barChartDataLayer = function (b, a) {
    return new L.BarChartDataLayer(b, a)
};
L.RadialBarChartDataLayer = L.ChartDataLayer.extend({
    initialize: function (b, a) {
        L.ChartDataLayer.prototype.initialize.call(this, b, a)
    }, _getMarker: function (b, a) {
        return new L.RadialBarChartMarker(b, a)
    }
});
L.radialBarChartDataLayer = function (b, a) {
    return new L.RadialBarChartDataLayer(b, a)
};
L.PieChartDataLayer = L.ChartDataLayer.extend({
    initialize: function (b, a) {
        L.ChartDataLayer.prototype.initialize.call(this, b, a)
    }, _getMarker: function (b, a) {
        return new L.PieChartMarker(b, a)
    }
});
L.pieChartDataLayer = function (b, a) {
    return new L.PieChartDataLayer(b, a)
};
L.CoxcombChartDataLayer = L.ChartDataLayer.extend({
    initialize: function (b, a) {
        L.ChartDataLayer.prototype.initialize.call(this, b, a)
    }, _getMarker: function (b, a) {
        return new L.CoxcombChartMarker(b, a)
    }
});
L.coxcombChartDataLayer = function (b, a) {
    return new L.CoxcombChartDataLayer(b, a)
};
L.StackedRegularPolygonDataLayer = L.ChartDataLayer.extend({
    initialize: function (b, a) {
        L.ChartDataLayer.prototype.initialize.call(this, b, a)
    }, _getMarker: function (b, a) {
        return new L.StackedRegularPolygonMarker(b, a)
    }
});
L.stackedRegularPolygonDataLayer = function (b, a) {
    return new L.StackedRegularPolygonDataLayer(b, a)
};
L.StackedPieChartDataLayer = L.ChartDataLayer.extend({
    initialize: function (b, a) {
        L.ChartDataLayer.prototype.initialize.call(this, b, a)
    }, _getMarker: function (b, a) {
        return new L.StackedPieChartMarker(b, a)
    }
});
L.stackedPieChartDataLayer = function (b, a) {
    return new L.StackedPieChartDataLayer(b, a)
};
L.RadialMeterMarkerDataLayer = L.DataLayer.extend({
    options: {showLegendTooltips: false}, initialize: function (b, a) {
        L.DataLayer.prototype.initialize.call(this, b, a)
    }, _getLayer: function (a, g, f) {
        this._addBoundary(a, g);
        a = this._processLocation(a);
        var d = this.options.chartOptions;
        var b = this.options.tooltipOptions;
        var c = this.options.displayOptions;
        var i = {};
        i = g;
        i.data = {};
        i.chartOptions = d;
        i.displayOptions = c;
        for (var h in this.options.chartOptions) {
            i.data[h] = L.Util.getFieldValue(f, h)
        }
        for (h in b) {
            i[h] = b[h]
        }
        var e;
        if (a) {
            e = this._getMarker(a, i)
        }
        return e
    }, _getMarker: function (b, a) {
        return new L.RadialMeterMarker(b, a)
    }
});
L.radialMeterMarkerDataLayer = function (b, a) {
    return new L.RadialMeterMarkerDataLayer(b, a)
};