BITS = [16, 8, 4, 2, 1];
BASE32 = "0123456789bcdefghjkmnpqrstuvwxyz";
NEIGHBORS = {
    right: {even: "bc01fg45238967deuvhjyznpkmstqrwx"},
    left: {even: "238967debc01fg45kmstqrwxuvhjyznp"},
    top: {even: "p0r21436x8zb9dcf5h7kjnmqesgutwvy"},
    bottom: {even: "14365h7k9dcfesgujnmqp0r2twvyx8zb"}
};
BORDERS = {right: {even: "bcfguvyz"}, left: {even: "0145hjnp"}, top: {even: "prxz"}, bottom: {even: "028b"}};
NEIGHBORS.bottom.odd = NEIGHBORS.left.even;
NEIGHBORS.top.odd = NEIGHBORS.right.even;
NEIGHBORS.left.odd = NEIGHBORS.bottom.even;
NEIGHBORS.right.odd = NEIGHBORS.top.even;
BORDERS.bottom.odd = BORDERS.left.even;
BORDERS.top.odd = BORDERS.right.even;
BORDERS.left.odd = BORDERS.bottom.even;
BORDERS.right.odd = BORDERS.top.even;
function refine_interval(b, d, a) {
    if (d & a) {
        b[0] = (b[0] + b[1]) / 2
    } else {
        b[1] = (b[0] + b[1]) / 2
    }
}
function calculateAdjacent(f, b) {
    f = f.toLowerCase();
    var a = f.charAt(f.length - 1);
    var d = (f.length % 2) ? "odd" : "even";
    var e = f.substring(0, f.length - 1);
    if (BORDERS[b][d].indexOf(a) != -1) {
        e = calculateAdjacent(e, b)
    }
    return e + BASE32[NEIGHBORS[b][d].indexOf(a)]
}
function decodeGeoHash(b) {
    var a = 1;
    var d = [];
    var e = [];
    d[0] = -90;
    d[1] = 90;
    e[0] = -180;
    e[1] = 180;
    lat_err = 90;
    lon_err = 180;
    for (i = 0; i < b.length; i++) {
        c = b[i];
        cd = BASE32.indexOf(c);
        for (j = 0; j < 5; j++) {
            mask = BITS[j];
            if (a) {
                lon_err /= 2;
                refine_interval(e, cd, mask)
            } else {
                lat_err /= 2;
                refine_interval(d, cd, mask)
            }
            a = !a
        }
    }
    d[2] = (d[0] + d[1]) / 2;
    e[2] = (e[0] + e[1]) / 2;
    return {latitude: d, longitude: e}
}
function encodeGeoHash(k, a) {
    var e = 1;
    var f = 0;
    var h = [];
    var d = [];
    var l = 0;
    var b = 0;
    var g = 12;
    geohash = "";
    h[0] = -90;
    h[1] = 90;
    d[0] = -180;
    d[1] = 180;
    while (geohash.length < g) {
        if (e) {
            mid = (d[0] + d[1]) / 2;
            if (a > mid) {
                b |= BITS[l];
                d[0] = mid
            } else {
                d[1] = mid
            }
        } else {
            mid = (h[0] + h[1]) / 2;
            if (k > mid) {
                b |= BITS[l];
                h[0] = mid
            } else {
                h[1] = mid
            }
        }
        e = !e;
        if (l < 4) {
            l++
        } else {
            geohash += BASE32[b];
            l = 0;
            b = 0
        }
    }
    return geohash
};