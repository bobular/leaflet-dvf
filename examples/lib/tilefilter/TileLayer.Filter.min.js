L.Color = L.Class.extend({
    initialize: function (a) {
        this._rgb = [0, 0, 0];
        this._hsl = [0, 1, 0.5];
        this._a = 1;
        if (a) {
            this.parseColorDef(a)
        }
    }, parseColorDef: function (a) {
    }, rgbToHSL: function (a, i, k) {
        a /= 255, i /= 255, k /= 255;
        var m = Math.max(a, i, k), e = Math.min(a, i, k);
        var f, n, c = (m + e) / 2;
        if (m == e) {
            f = n = 0
        } else {
            var j = m - e;
            n = c > 0.5 ? j / (2 - m - e) : j / (m + e);
            switch (m) {
                case a:
                    f = (i - k) / j + (i < k ? 6 : 0);
                    break;
                case i:
                    f = (k - a) / j + 2;
                    break;
                case k:
                    f = (a - i) / j + 4;
                    break
            }
            f /= 6
        }
        return [f, n, c]
    }, hslToRGB: function (i, m, f) {
        var a, j, k;
        if (m == 0) {
            a = j = k = f
        } else {
            function e(h, g, b) {
                if (b < 0) {
                    b += 1
                }
                if (b > 1) {
                    b -= 1
                }
                if (b < 1 / 6) {
                    return h + (g - h) * 6 * b
                }
                if (b < 1 / 2) {
                    return g
                }
                if (b < 2 / 3) {
                    return h + (g - h) * (2 / 3 - b) * 6
                }
                return h
            }

            var c = f < 0.5 ? f * (1 + m) : f + m - f * m;
            var d = 2 * f - c;
            a = e(d, c, i + 1 / 3);
            j = e(d, c, i);
            k = e(d, c, i - 1 / 3)
        }
        return [Math.floor(a * 255), Math.floor(j * 255), Math.floor(k * 255)]
    }, setRGB: function (d, c, a) {
        this._rgb = [d, c, a];
        this._hsl = this.rgbToHSL(d, c, a);
        return this
    }, setHSL: function (c, b, a) {
        this._hsl = [c, b, a];
        this._rgb = this.hslToRGB(c, b, a);
        return this
    }, toHSL: function () {
        return this._hsl
    }, toHSLString: function () {
        var a = "hsl";
        if (this._a < 1) {
            a += "a"
        }
        return a + "(" + (this._hsl[0] * 360).toFixed(1) + "," + (this._hsl[1] * 100).toFixed(0) + "%," + (this._hsl[2] * 100).toFixed(0) + "%)"
    }, toRGB: function () {
        return this._rgb
    }, toRGBString: function () {
        var c;
        if (this._a < 1) {
            c = "rgba(" + this._rgb[0].toFixed(0) + "," + this._rgb[1].toFixed(0) + "," + this._rgb[2].toFixed(0) + "," + this._a.toFixed(1) + ")"
        } else {
            var b = [this._rgb[0].toString(16), this._rgb[1].toString(16), this._rgb[2].toString(16)];
            for (var a = 0; a < b.length; ++a) {
                if (b[a].length === 1) {
                    b[a] = "0" + b[a]
                }
            }
            c = "#" + b.join("")
        }
        return c
    }, r: function (a) {
        if (!arguments.length) {
            return this._rgb[0]
        }
        return this.setRGB(a, this._rgb[1], this._rgb[2])
    }, g: function (a) {
        if (!arguments.length) {
            return this._rgb[1]
        }
        return this.setRGB(this._rgb[0], a, this._rgb[2])
    }, b: function (a) {
        if (!arguments.length) {
            return this._rgb[2]
        }
        return this.setRGB(this._rgb[0], this._rgb[1], a)
    }, h: function (a) {
        if (!arguments.length) {
            return this._hsl[0]
        }
        return this.setHSL(a, this._hsl[1], this._hsl[2])
    }, s: function (a) {
        if (!arguments.length) {
            return this._hsl[1]
        }
        return this.setHSL(this._hsl[0], a, this._hsl[2])
    }, l: function (a) {
        if (!arguments.length) {
            return this._hsl[2]
        }
        return this.setHSL(this._hsl[0], this._hsl[1], a)
    }, a: function (a) {
        if (!arguments.length) {
            return this._a
        }
        this._a = a;
        return this
    }
});
L.RGBColor = L.Color.extend({
    initialize: function (a) {
        L.Color.prototype.initialize.call(this, a)
    }, parseColorDef: function (h) {
        var f = h instanceof Array;
        var e = h.indexOf("#") === 0;
        var k = [];
        var j, i, c, d;
        if (f) {
            j = Math.floor(h[0]);
            i = Math.floor(h[1]);
            c = Math.floor(h[2]);
            d = h.length === 4 ? h[3] : 1
        } else {
            if (e) {
                h = h.replace("#", "");
                j = parseInt(h.substring(0, 2), 16);
                i = parseInt(h.substring(2, 4), 16);
                c = parseInt(h.substring(4, 6), 16);
                d = h.length === 8 ? parseInt(h.substring(6, 8), 16) : 1
            } else {
                k = h.replace("rgb", "").replace("a", "").replace(/\s+/g, "").replace("(", "").replace(")", "").split(",");
                j = parseInt(k[0]);
                i = parseInt(k[1]);
                c = parseInt(k[2]);
                d = k.length === 4 ? parseInt(k[3]) : 1
            }
        }
        this.setRGB(j, i, c);
        this._a = d
    }
});
L.rgbColor = function (a) {
    return new L.RGBColor(a)
};
L.ImageFilter = L.Class.extend({
    initialize: function (b, a) {
        this._image = b;
        L.Util.setOptions(this, a)
    }, render: function () {
        return this
    }
});
L.CanvasFilter = L.ImageFilter.extend({
    render: function () {
        var d;
        var a = L.Browser.retina ? 2 : 1;
        var e = Math.min(this._image._layer.options.tileSize * a, 256);
        if (!this._image.canvasContext) {
            d = document.createElement("canvas");
            d.width = d.height = e;
            this._image.canvasContext = d.getContext("2d")
        }
        var b = this._image.canvasContext;
        if (b) {
            var f = this.options.channelFilter || function (g) {
                    return g
                };
            b.drawImage(this._image, 0, 0);
            var c = b.getImageData(0, 0, e, e);
            c = f.call(this._image, c);
            b.putImageData(c, 0, 0);
            this._image.onload = null;
            this._image.removeAttribute("crossorigin");
            if (this._image._layer.options.canvasFilter) {
                this._image._layer.options.canvasFilter.call(this)
            } else {
                this._image.src = d.toDataURL()
            }
        }
        return this
    }
});
L.ChannelFilters = {};
L.AlphaChannelFilter = L.Class.extend({
    options: {opacity: 255}, initialize: function (b, a) {
        this._imageData = b;
        L.Util.setOptions(this, a)
    }, setOpacity: function (a) {
        this.options.opacity = a
    }, updateChannels: function (a) {
        a[3] = this.options.opacity;
        return a
    }, render: function () {
        var e = this._imageData.data;
        for (var c = 0, d = e.length; c < d; c += 4) {
            var a = this.updateChannels([e[c], e[c + 1], e[c + 2], e[c + 3]]);
            for (var b = 0; b < 4; ++b) {
                e[c + b] = a[b]
            }
        }
        return this._imageData
    }
});
L.CanvasChannelFilter = L.AlphaChannelFilter.extend({
    options: {filters: []}, setFilters: function (a) {
        this.options.filters = a;
        return this
    }, clearFilters: function () {
        this.options.filters = [];
        return this
    }, updateChannels: function (a) {
        a = L.AlphaChannelFilter.prototype.updateChannels.call(this, a);
        var c = this.options.filters;
        for (var b = 0; b < c.length; ++b) {
            a = c[b].updateChannels(a)
        }
        return a
    }
});
L.ChannelFilter = L.Class.extend({
    initialize: function (a) {
        L.Util.setOptions(this, a)
    }, updateChannels: function (a) {
        return a
    }
});
L.ChannelFilters.Grayscale = L.ChannelFilter.extend({
    options: {channelWeights: [3, 4, 1]}, initialize: function (a) {
        this.sumWeights()
    }, sumWeights: function () {
        var b = 0;
        for (var a = 0; a < 3; ++a) {
            b += this.options.channelWeights[a]
        }
        this._summedWeight = b
    }, updateChannels: function (a) {
        var b = this.options.channelWeights;
        a[0] = a[1] = a[2] = (b[0] * a[0] + b[1] * a[1] + b[2] * a[2]) / this._summedWeight;
        return a
    }
});
L.ChannelFilters.Threshold = L.ChannelFilters.Grayscale.extend({
    options: {
        channelWeights: [3, 4, 1],
        thresholds: [128, 128, 128, 128],
        trueValues: [255, 255, 255, 255],
        falseValues: [0, 0, 0, 255]
    }, updateChannels: function (a) {
        a = L.ChannelFilters.Grayscale.updateChannels.call(this, a);
        for (var b = 0; b < 4; ++b) {
            a[b] = a[b] >= this.options.thresholds[b] ? this.options.trueValues[b] : this.options.falseValues[b]
        }
        return a
    }
});
L.ChannelFilters.Contrast = L.ChannelFilter.extend({
    options: {
        contrast: 0, factor: function (a) {
            return 255 * (255 + a) / (255 * (255 - a))
        }
    }, initialize: function (b, a) {
        this._factor = this.options.factor.call(this, this.options.contrast)
    }, updateChannels: function (a) {
        for (var b = 0; b < 3; ++b) {
            a[b] = this._factor * (a[b] - 128) + 128
        }
        return a
    }
});
L.ChannelFilters.Invert = L.ChannelFilter.extend({
    updateChannels: function (a) {
        for (var b = 0; b < 3; ++b) {
            a[b] = 255 - a[b]
        }
        return a
    }
});
L.ChannelFilters.ChannelSwap = L.ChannelFilter.extend({
    options: {positions: [0, 1]}, updateChannels: function (a) {
        var b = a[this.options.positions[0]];
        a[this.options.positions[0]] = a[this.options.positions[1]];
        a[this.options.positions[1]] = b;
        return a
    }
});
L.ChannelFilters.Matrix = L.ChannelFilter.extend({
    options: {matrix: [0.393, 0.769, 0.189, 0.349, 0.686, 0.168, 0.272, 0.534, 0.131]},
    updateChannels: function (c) {
        var d = this.options.matrix;
        var h = c[0];
        var f = c[1];
        var a = c[2];
        for (var e = 0; e < 3; ++e) {
            c[e] = h * d[3 * e] + f * d[3 * e + 1] + a * d[3 * e + 2]
        }
        return c
    }
});
L.ChannelFilters.Sepia = L.ChannelFilters.Matrix.extend({options: {matrix: [0.393, 0.769, 0.189, 0.349, 0.686, 0.168, 0.272, 0.534, 0.131]}});
L.ChannelFilters.Adjust = L.ChannelFilter.extend({
    options: {adjustments: [20, 20, 20]}, updateChannels: function (a) {
        for (var b = 0; b < 3; ++b) {
            a[b] = Math.min(Math.max(a[b] + this.options.adjustments[b], 0), 255)
        }
        return a
    }
});
L.ChannelFilters.HSLAdjust = L.ChannelFilter.extend({
    options: {adjustments: [30, 0, 0]}, updateChannels: function (a) {
        var b = new L.RGBColor([a[0], a[1], a[2], a[3]]);
        b.setHSL((b._hsl[0] * 360 + this.options.adjustments[0]) / 360, b._hsl[1] + this.options.adjustments[1], b._hsl[2] + this.options.adjustments[2]);
        for (var c = 0; c < 3; ++c) {
            a[c] = b._rgb[c]
        }
        if (this.options.adjustments.length > 3) {
            a[3] += this.options.adjustments[3]
        }
        b = null;
        return a
    }
});
L.ChannelFilters.Colorize = L.ChannelFilter.extend({
    options: {channel: 0, values: [0, 0]},
    updateChannels: function (c) {
        var f = [0, 1, 2];
        f.splice(this.options.channel, 1);
        var e = c[0];
        var d = c[1];
        var a = c[2];
        c[this.options.channel] = (e + d + a) / 3;
        c[f[0]] = this.options.values[0];
        c[f[1]] = this.options.values[1];
        return c
    }
});
L.CSSFilter = L.ImageFilter.extend({
    statics: {prefixes: ["-webkit-", "-moz-", "-ms-", "-o-", ""]}, render: function () {
        for (var a = 0; a < L.CSSFilter.prefixes.length; ++a) {
            this._image.style.cssText += " " + L.CSSFilter.prefixes[a] + "filter: " + this.options.filters.join(" ") + ";"
        }
    }
});
L.CombinedFilter = L.ImageFilter.extend({
    setCanvasFilter: function (a) {
        this.options.canvasFilter = a;
        return this.render()
    }, setCSSFilter: function (a) {
        this.options.cssFilter = a;
        return this.render()
    }, render: function () {
        if (this.options.canvasFilter) {
            this.options.canvasFilter.call(this._image)
        }
        if (this.options.cssFilter) {
            this.options.cssFilter.call(this._image)
        }
    }
});
L.ImageFilters = {};
L.ImageFilters.GenerateCSSFilter = function (a) {
    return function () {
        return new L.CSSFilter(this, {filters: a}).render()
    }
};
L.ImageFilters.GenerateChannelFilter = function (a) {
    return function () {
        return new L.CanvasFilter(this, {
            channelFilter: function (b) {
                return new L.CanvasChannelFilter(b, {filters: a}).render()
            }
        }).render()
    }
};
L.ImageFilters.Presets = {
    CSS: {
        None: function () {
            return this
        },
        Brightness200: L.ImageFilters.GenerateCSSFilter(["brightness(200%)"]),
        Brightness180: L.ImageFilters.GenerateCSSFilter(["brightness(180%)"]),
        Brightness160: L.ImageFilters.GenerateCSSFilter(["brightness(160%)"]),
        Brightness140: L.ImageFilters.GenerateCSSFilter(["brightness(140%)"]),
        Brightness120: L.ImageFilters.GenerateCSSFilter(["brightness(120%)"]),
        Brightness100: L.ImageFilters.GenerateCSSFilter(["brightness(100%)"]),
        Brightness80: L.ImageFilters.GenerateCSSFilter(["brightness(80%)"]),
        Brightness60: L.ImageFilters.GenerateCSSFilter(["brightness(60%)"]),
        Brightness40: L.ImageFilters.GenerateCSSFilter(["brightness(40%)"]),
        Brightness20: L.ImageFilters.GenerateCSSFilter(["brightness(20%)"]),
        Contrast200: L.ImageFilters.GenerateCSSFilter(["contrast(200%)"]),
        Contrast180: L.ImageFilters.GenerateCSSFilter(["contrast(180%)"]),
        Contrast160: L.ImageFilters.GenerateCSSFilter(["contrast(160%)"]),
        Contrast140: L.ImageFilters.GenerateCSSFilter(["contrast(140%)"]),
        Contrast120: L.ImageFilters.GenerateCSSFilter(["contrast(120%)"]),
        Contrast100: L.ImageFilters.GenerateCSSFilter(["contrast(100%)"]),
        Contrast80: L.ImageFilters.GenerateCSSFilter(["contrast(80%)"]),
        Contrast60: L.ImageFilters.GenerateCSSFilter(["contrast(60%)"]),
        Contrast40: L.ImageFilters.GenerateCSSFilter(["contrast(40%)"]),
        Contrast20: L.ImageFilters.GenerateCSSFilter(["contrast(20%)"]),
        Sepia100: L.ImageFilters.GenerateCSSFilter(["sepia(100%)"]),
        Sepia80: L.ImageFilters.GenerateCSSFilter(["sepia(80%)"]),
        Sepia60: L.ImageFilters.GenerateCSSFilter(["sepia(60%)"]),
        Sepia40: L.ImageFilters.GenerateCSSFilter(["sepia(40%)"]),
        Sepia20: L.ImageFilters.GenerateCSSFilter(["sepia(20%)"]),
        Saturate200: L.ImageFilters.GenerateCSSFilter(["saturate(200%)"]),
        Saturate300: L.ImageFilters.GenerateCSSFilter(["saturate(300%)"]),
        Saturate400: L.ImageFilters.GenerateCSSFilter(["saturate(400%)"]),
        Saturate500: L.ImageFilters.GenerateCSSFilter(["saturate(500%)"]),
        Saturate600: L.ImageFilters.GenerateCSSFilter(["saturate(600%)"]),
        Saturate700: L.ImageFilters.GenerateCSSFilter(["saturate(700%)"]),
        Invert100: L.ImageFilters.GenerateCSSFilter(["invert(100%)"]),
        Invert80: L.ImageFilters.GenerateCSSFilter(["invert(80%)"]),
        Invert60: L.ImageFilters.GenerateCSSFilter(["invert(60%)"]),
        Invert40: L.ImageFilters.GenerateCSSFilter(["invert(40%)"]),
        Invert20: L.ImageFilters.GenerateCSSFilter(["invert(20%)"]),
        HueRotate30: L.ImageFilters.GenerateCSSFilter(["hue-rotate(30deg)"]),
        HueRotate60: L.ImageFilters.GenerateCSSFilter(["hue-rotate(60deg)"]),
        HueRotate90: L.ImageFilters.GenerateCSSFilter(["hue-rotate(90deg)"]),
        HueRotate120: L.ImageFilters.GenerateCSSFilter(["hue-rotate(120deg)"]),
        HueRotate150: L.ImageFilters.GenerateCSSFilter(["hue-rotate(150deg)"]),
        HueRotate180: L.ImageFilters.GenerateCSSFilter(["hue-rotate(180deg)"]),
        HueRotate210: L.ImageFilters.GenerateCSSFilter(["hue-rotate(210deg)"]),
        HueRotate240: L.ImageFilters.GenerateCSSFilter(["hue-rotate(240deg)"]),
        HueRotate270: L.ImageFilters.GenerateCSSFilter(["hue-rotate(270deg)"]),
        HueRotate300: L.ImageFilters.GenerateCSSFilter(["hue-rotate(300deg)"]),
        HueRotate330: L.ImageFilters.GenerateCSSFilter(["hue-rotate(330deg)"])
    }, CanvasChannel: {
        None: function () {
            return this
        },
        Grayscale1: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Grayscale()]),
        Grayscale2: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Grayscale({weights: [1, 1, 1]})]),
        Grayscale3: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Grayscale({weights: [1, 2, 3]})]),
        HueRotate30: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [30, 0, 0]})]),
        HueRotate60: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [60, 0, 0]})]),
        HueRotate90: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [90, 0, 0]})]),
        HueRotate120: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [120, 0, 0]})]),
        HueRotate150: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [150, 0, 0]})]),
        HueRotate180: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [180, 0, 0]})]),
        HueRotate210: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [210, 0, 0]})]),
        HueRotate240: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [240, 0, 0]})]),
        HueRotate270: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [270, 0, 0]})]),
        HueRotate300: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [300, 0, 0]})]),
        HueRotate330: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.HSLAdjust({adjustments: [330, 0, 0]})]),
        Sepia1: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Sepia()]),
        Invert: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Invert()]),
        ColorizeRed: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Colorize({
            channel: 0,
            values: [0, 0]
        })]),
        ColorizeGreen: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Colorize({
            channel: 1,
            values: [0, 0]
        })]),
        ColorizeBlue: L.ImageFilters.GenerateChannelFilter([new L.ChannelFilters.Colorize({
            channel: 2,
            values: [0, 0]
        })])
    }
};
L.ImageFilterFunctions = {
    __loadTile: L.TileLayer.prototype._loadTile,
    __tileOnLoad: L.TileLayer.prototype._tileOnLoad,
    setFilter: function (a) {
        this.options.filter = a;
        return this.redraw()
    },
    clearFilter: function () {
        this.options.filter = null;
        return this.redraw()
    },
    _tileOnLoad: function () {
        var a = this._layer.options.filter;
        if (a) {
            a.call(this)
        }
        this._layer.__tileOnLoad.call(this)
    },
    _loadTile: function (b, a) {
        b.setAttribute("crossorigin", "anonymous");
        this.__loadTile.call(this, b, a)
    }
};
L.TileLayer.include(L.ImageFilterFunctions);